###
# created by python script convert.py
# Felix Sterzelmaier, Concat AG
# Created: 2019-11-14 10:11:15 CET(+0100)
# Dependencies: pip install --upgrade pip
# Dependencies: pip install pyvmomi
# Run with: ansible-playbook -c local -i localhost, A_03_addhypervisormanager.yml
# Run on: 10.10.5.239/olant-ansible as user olant in path /home/olant/synergy-ansible/feste-script/output
# Before reading this playbook please read the README.txt and the sourcecode of convert.py first!
###
---
- hosts: localhost
  vars:
    config: "{{ playbook_dir }}/A_oneview_config.json"
  tasks:

  - name: Login to API and retrieve AUTH-Token
    uri:
      validate_certs: no
      headers:
        X-Api-Version: 1000
        Content-Type: application/json
      url: https://a-dcb-syn0001.ad.nublar.de/rest/login-sessions
      method: POST
      body_format: json
      body:
        authLoginDomain: "LOCAL"
        password: "Concat123"
        userName: "Administrator"
        loginMsgAck: "true"
    register: var_this

  - set_fact: var_token='{{ var_this["json"]["sessionID"] }}'

  - debug:
      var: var_token

  - name: Create a hypervisor cluster profile. (Using AUTH-Token) (Statuscode should be 202)
    uri:
      validate_certs: no
      headers:
        Auth: "{{ var_token }}"
        X-Api-Version: 1000
        Content-Type: application/json
      url: https://a-dcb-syn0001.ad.nublar.de/rest/hypervisor-cluster-profiles
      method: POST
      body_format: json
      body:
        type: HypervisorClusterProfileV3
        description: "{{ hvcp_desc }}"
        hypervisorType: Vmware
        hypervisorClusterSettings:
          type: Vmware
          distributedSwitchVersion: 6.6.0
          distributedSwitchUsage: '0'
          drsEnabled: true
          haEnabled: true
          multiNicVMotion: true
          virtualSwitchType: Distributed
        hypervisorHostProfileTemplate:
          serverProfileTemplateUri: "{{ spt_uri }}"
          deploymentPlan:
            serverPassword: "{{ serverPassword }}"
            deploymentCustomArgs: []
          hostprefix: "{{ hvcp_name }}"
          virtualSwitches:
        #CODE Loop_start über alle Standard-Switches
          - name: "{{ vswitch_name }}"
            virtualSwitchType: Standard
            version: 
            virtualSwitchPortGroups:
            - name: "{{ portgroup_name }}"
              networkUris:
              - "{{ network_uri }}"
              vlan: '0'
              virtualSwitchPorts:
              - virtualPortPurpose:
                - "{{ network_purpose }}"
                ipAddress: 
                subnetMask: 
                dhcp: true
                action: NONE
              action: NONE
            virtualSwitchUplinks:
            - name: Mezz 3:1-d #TODO
              active: false
              mac: 
              vmnic: 
              action: NONE
            - name: Mezz 3:2-d #TODO
              active: false
              mac: 
              vmnic: 
              action: NONE
            action: NONE
            networkUris:
            - "{{ network_uri }}"
          #CODE Loop_end
        #CODE Loop_start über alle Distributed Switches
          - name: "{{ vswitch_name }}"
            virtualSwitchType: Distributed
            version: 6.6.0
            virtualSwitchPortGroups:
        #CODE Loop_start über alle Netze im netSet
            - name: "{{ network_name }}"
              networkUris:
              - "{{ network_uri }}"
              vlan: "{{ network_vlan }}"
              virtualSwitchPorts: []
              action: NONE
        #CODE Loop_end
            virtualSwitchUplinks:
            - name: Mezz 3:1-f #TODO
              active: false
              mac: 
              vmnic: 
              action: NONE
            - name: Mezz 3:2-f #TODO
              active: false
              mac: 
              vmnic: 
              action: NONE
            action: NONE
            networkUris:
            - "{{ networkset_uri }}"
        #CODE Loop_end
          hostConfigPolicy:
            leaveHostInMaintenance: false
            useHostnameToRegister: true
          virtualSwitchConfigPolicy:
            manageVirtualSwitches: true
            configurePortGroups: true
        name: "{{ hvcp_name }}"
        mgmtIpSettingsOverride:
          netmask: "{{ mgt_network_netmask }}"
          gateway: "{{ mgt_network_gateway }}"
          dnsDomain: "{{ mgt_network_domain }}"
          primaryDns: "{{ mgt_network_dns1 }}"
          secondaryDns: "{{ mgt_network_dns2 }}"
        hypervisorManagerUri: "{{ hvm_uri }}"
        path: "FFM- {{ zone }}" #CODE
      status_code: 202
    register: var_return

  - debug:
      var: var_return

  - name: Taskinfo
    uri:
      validate_certs: no
      headers:
        Auth: "{{ var_token }}"
        X-Api-Version: 1000
        Content-Type: application/json
      url: '{{ var_return["location"] }}'
      method: GET
      status_code: 200
    register: var_taskinfo

  - debug:
      var: var_taskinfo

